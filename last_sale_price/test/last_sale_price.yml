-
  In order to test module last_sale_price I will create
  multiple orders on different dates with different products
  and for different partners

  I test the following with user admin
-
  !context
    uid: 'base.user_root'
-
  I create a screwdriver product
-
  !record {model: product.product, id: product_product_a}:
    categ_id: product.product_category_1
    name: Blue Screwdriver A
    cost_method: standard
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    company_id: 0
    standard_price: 5.0
    list_price: 25.0
-
  I create a hammer product
-
  !record {model: product.product, id: product_product_b}:
    categ_id: product.product_category_1
    name: Red Hammer B
    cost_method: standard
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    company_id: 0
    standard_price: 10.0
    list_price: 30.0

-
  I create a sale order buying screwdriver
-
  !record {model: sale.order, id: sale_order_p1_1}:
    name: My first order
    partner_id: base.res_partner_12
    date_order: 2000-01-01
    order_line:
      - name: Screwdrivers
        product_id: product_product_a
        product_uom_qty: 5
        price_unit: 21.0

-
  I verify no last price is set as there was no previous sale for this partner
-
  !assert {model: sale.order, id: sale_order_p1_1, string: last_sale_price is not empty}:
    - order_line[0].last_sale_price == False
    - order_line[0].last_sale_qty == False
    - order_line[0].last_sale_date == False

-
  I confirm the first order
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_p1_1}

-
  I verify confirming the order changed previous data for this product
-
  !assert {model: sale.order, id: sale_order_p1_1, string: last_sale_price is not correctly set}:
    - order_line[0].last_sale_price == 21.0
    - order_line[0].last_sale_qty == 5
    - order_line[0].last_sale_date == '2000-01-01'

-
  In order to test different product doesn't impact each other
  and test if with multiple order the last one is the one we use
  Create a second sale order buying screwdriver and hammers
-
  !record {model: sale.order, id: sale_order_p1_2}:
    name: My second order
    partner_id: base.res_partner_12
    date_order: 2001-01-01
    order_line:
      - name: Screwdrivers
        product_id: product_product_a
        product_uom_qty: 6
        price_unit: 20.0
      - name: Hammers
        product_id: product_product_b
        product_uom_qty: 25
        price_unit: 25.0

-
  I verify nothing changed after creating the unconfirmed order
-
  !assert {model: sale.order, id: sale_order_p1_2, string: last_sale data are not correctly set}:
    - order_line[0].last_sale_price == 21.0
    - order_line[0].last_sale_qty == 5
    - order_line[0].last_sale_date == '2000-01-01'

-
  I verify product B is not impacted by product A
-
  !assert {model: sale.order, id: sale_order_p1_2, string: last_sale_price of second line is not empty}:
    - order_line[1].last_sale_price == False
    - order_line[1].last_sale_qty == False
    - order_line[1].last_sale_date == False

-
  I confirm the second first order
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_p1_2}

-
  I verify the newest sale changed lase Sale data
-
  !assert {model: sale.order, id: sale_order_p1_2, string: last_sale data is not set with last data}:
    - order_line[0].last_sale_price == 20.0
    - order_line[0].last_sale_qty == 6
    - order_line[0].last_sale_date == '2001-01-01'
-
  I verify second customer has no impact on product B
-
  !assert {model: sale.order, id: sale_order_p1_2, string: last_sale data is wrongly set with multiple products}:
    - order_line[1].last_sale_price == 25.0
    - order_line[1].last_sale_qty == 25
    - order_line[1].last_sale_date == '2001-01-01'
-
  In order sales from a partner doesn't impact sales for other partners
  and in order to impact of multiple order line from same partner on same product
  Create another order buying hammers in 2 times for another customer
-
  !record {model: sale.order, id: sale_order_p2_1}:
    name: Another order from another customer
    partner_id: base.res_partner_11
    date_order: 2001-01-01
    order_line:
      - name: Hammers
        product_id: product_product_b
        product_uom_qty: 100
        price_unit: 5.0
      - name: Hammers
        product_id: product_product_b
        product_uom_qty: 100
        price_unit: 15.0

-
  I verify nothing is set for second customer
-
  !assert {model: sale.order, id: sale_order_p2_1, string: last_sale data is not empty}:
    - order_line[0].last_sale_price == False
    - order_line[0].last_sale_qty == False
    - order_line[0].last_sale_date == False

-
  I confirm the third order
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_p2_1}

-
  I verify that for first customer, the sale to second customer has no impact on product B
-
  !assert {model: sale.order, id: sale_order_p1_2, string: last_sale data is wrongly shared by partner}:
    - order_line[1].last_sale_price == 25.0
    - order_line[1].last_sale_qty == 25
    - order_line[1].last_sale_date == '2001-01-01'

-
  I verify that for second customer product B last sale price is the mean of all sales of same date
-
  !assert {model: sale.order, id: sale_order_p2_1, string: last_sale data didn't change for hammers}:
    - order_line[0].last_sale_price == 10.0
    - order_line[0].last_sale_qty == 200
    - order_line[0].last_sale_date == '2001-01-01'
