-
  In order to test the date_validity is not set without
  parametering it on comany.
  I create sale order
-
  !record {model: sale.order, id: sale_order_test_validity1}:
    partner_id: base.res_partner_2
    note: No validity to set
    payment_term: account.account_payment_term
    order_line:
      - product_id: product.product_product_7
        product_uom_qty: 8

-
  I check date_validity value of order in 'Sale Order'.
-
  !assert {model: sale.order, id: sale_order_test_validity1, string: Sale order date_validity should be empty}:
    - date_validity == False
-
  I change the value of date_order to check it doesn't update date_validity
-
  !python {model: sale.order}: |
    sale_order = self.browse(cr, uid, ref("sale_validity.sale_order_test_validity1"))
    values = {'date_order': '2014-01-01 08:30:00'}
    field_onchange = sale_order._onchange_spec()
    results = sale_order.onchange(values, 'date_order', field_onchange)
    sale_order.write(results['value'])
-
  I check that changing the value of date_order didn't updated date_validity
-
  !assert {model: sale.order, id: sale_order_test_validity1, string: The onchange function of date_order was not correctly triggered}:
    - date_validity == False


-
  In order to test the date_validity is correctly set when
  a default number of days has been set on comany.
  I change the company settings,
-
  !python {model: res.company, id: base.main_company}: |
      self.default_sale_order_validity_days = 5
-
  I create sale order
-
  !record {model: sale.order, id: sale_order_test_validity2}:
    partner_id: base.res_partner_2
    note: Validity defined
    payment_term: account.account_payment_term
    order_line:
      - product_id: product.product_product_7
        product_uom_qty: 8

-
  I check date_validity value of order in 'Sale Order'.
-
  !python {model: sale.order}: |
    from datetime import datetime, timedelta
    from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT
    sale_order = self.browse(cr, uid, ref("sale_validity.sale_order_test_validity2"))
    date_order = datetime.strptime(sale_order.date_order, DEFAULT_SERVER_DATETIME_FORMAT).date()
    date_validity_check = date_order + timedelta(days=5)
    date_validity = datetime.strptime(sale_order.date_validity, DEFAULT_SERVER_DATE_FORMAT).date()
    assert date_validity == date_validity_check, "Validity date %s should be %s" % (date_validity, date_validity_check)
-
  I change the value of date_order to check it does update date_validity
-
  !python {model: sale.order}: |
    sale_order = self.browse(cr, uid, ref("sale_validity.sale_order_test_validity2"))
    values = {'date_order': '2014-01-01 08:30:00'}
    field_onchange = sale_order._onchange_spec()
    results = sale_order.onchange(values, 'date_order', field_onchange)
    sale_order.write(results['value'])
-
  I check that changing the value of date_order didn't updated date_validity
-
  !python {model: sale.order}: |
    from datetime import datetime, timedelta
    from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT
    sale_order = self.browse(cr, uid, ref("sale_validity.sale_order_test_validity2"))
    date_order = datetime.strptime(sale_order.date_order, DEFAULT_SERVER_DATETIME_FORMAT).date()
    date_validity_check = date_order + timedelta(days=5)
    date_validity = datetime.strptime(sale_order.date_validity, DEFAULT_SERVER_DATE_FORMAT).date()
    assert date_validity == date_validity_check, "On change didn't set correctly the validity date (%s) to %s." % (date_validity, date_validity_check)

