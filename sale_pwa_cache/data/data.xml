<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data noupdate="0">
        <!-- POST -->
        <record id="pwa_cache_post_sale_order_onboarding_panel" model="pwa.cache">
            <field name="name">Sale Order - Post - Onboarding Panel</field>
            <field name="cache_type">post</field>
            <field name="post_url">sales/sale_quotation_onboarding_panel</field>
            <field name="internal">1</field>
        </record>
        <!-- GET -->
        <record id="pwa_cache_get_sale_order_onboarding_panel_bg" model="pwa.cache">
            <field name="name">Sale Order - Get - Onboarding Panel Background</field>
            <field name="cache_type">get</field>
            <field
                name="get_urls"
            >sale/static/src/img/sale_quotation_onboarding_bg.jpg</field>
            <field name="internal">1</field>
        </record>
    </data>
    <data noupdate="1">
        <!-- MODEL -->
        <record
            id="product_pwa_cache.pwa_cache_product_product_no_big_images"
            model="pwa.cache"
        >
            <field
                name="model_field_included_ids"
                eval="[(4, ref('web_pwa_cache.field_product_product__sale_order_partner_id_product'), 0), (4, ref('sale_pwa_cache.field_product_product__uom_category_id'), 0)]"
            />
        </record>
        <record id="pwa_cache_model_crm_team_all" model="pwa.cache">
            <field name="name">CRM Teams (All)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="sales_team.model_crm_team" />
            <field name="model_domain_raw">[]</field>
        </record>
        <record id="pwa_cache_model_uom_uom_all" model="pwa.cache">
            <field name="name">Units of Measure (All)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="uom.model_uom_uom" />
        </record>
        <record id="pwa_cache_model_sale_order_all" model="pwa.cache">
            <field name="name">Sale Orders (All - Last year)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="sale.model_sale_order" />
            <field
                name="model_domain_raw"
            >[['date_order', '&gt;', (context_today() - relativedelta(days=31)).strftime('%Y-%m-%d')]]</field>
            <field
                name="model_field_included_ids"
                eval="[(6, 0, [ref('sale.field_sale_order__order_line')])]"
            />
        </record>
        <record id="pwa_cache_model_sale_order_lines_all" model="pwa.cache">
            <field name="name">Sale Order Lines (All - Last year)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="sale.model_sale_order_line" />
            <field
                name="model_domain_raw"
            >[['order_id.date_order', '&gt;', (context_today() - relativedelta(days=31)).strftime('%Y-%m-%d')]]</field>
        </record>
        <record id="pwa_cache_model_account_tax_all" model="pwa.cache">
            <field name="name">Account Tax (All)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="account.model_account_tax" />
            <field name="model_domain_raw">[]</field>
        </record>
        <record id="pwa_cache_model_account_incoterms_all" model="pwa.cache">
            <field name="name">Account Incoterms (All)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="account.model_account_incoterms" />
            <field name="model_domain_raw">[]</field>
        </record>
        <record id="pwa_cache_model_account_payment_term_all" model="pwa.cache">
            <field name="name">Account Payment Term (All)</field>
            <field name="cache_type">model</field>
            <field name="model_id" ref="account.model_account_payment_term" />
            <field name="model_domain_raw">[]</field>
        </record>
        <!-- ONCHANGE -->
        <record id="pwa_cache_onchange_sale_order_partern_id" model="pwa.cache">
            <field name="name">Sale Order - Onchange - partner_id</field>
            <field name="cache_type">onchange</field>
            <field name="model_id" ref="sale.model_sale_order" />
            <field name="onchange_field_id" ref="sale.field_sale_order__partner_id" />
            <field
                name="onchange_selector_ids"
                eval="[(5,0,0),
                (0,0,{
                    'field_name': 'partner_id',
                    'expression': &quot;env['res.partner'].search([('customer_rank', '>', 0)])&quot;,
                }),
            ]"
            />
            <field
                name="onchange_trigger_ids"
                eval="[(5,0,0),
                (0,0,{
                    'field_name': 'partner_id',
                    'trigger_type': 'complete',
                    'model': 'res.partner',
                    'selector_expression': 'result=self',
                    'vals_discriminant': 'active,property_product_pricelist,parent_id,child_ids,type',
                }),
            ]"
            />
        </record>
        <record id="pwa_cache_onchange_sale_order_line_product_id" model="pwa.cache">
            <field name="name">Sale Order Line - Onchange - product_id</field>
            <field name="cache_type">onchange</field>
            <field name="model_id" ref="sale.model_sale_order_line" />
            <field
                name="onchange_field_id"
                ref="sale.field_sale_order_line__product_id"
            />
            <field
                name="onchange_selector_ids"
                eval="[(5,0,0),
                (0,0,{
                    'field_name': 'product_id',
                    'expression': &quot;env['product.product'].search([('sale_ok', '=', True)])&quot;,
                },{
                    'field_name': 'order_id.pricelist_id',
                    'expression': &quot;functools.reduce(lambda a, b: a | b, [x.property_product_pricelist for x in env['res.partner'].search([('customer_rank', '>', 0)])])&quot;,
                    'required': True,
                },{
                    'field_name': 'order_id.partner_id',
                    'expression': &quot;env['res.partner'].search([], limit=1)&quot;,
                    'disposable': True,
                }),
            ]"
            />
            <field
                name="onchange_trigger_ids"
                eval="[(5,0,0),
                (0,0,{
                    'field_name': 'product_id',
                    'trigger_type': 'complete',
                    'model': 'product.product',
                    'selector_expression': 'result=self',
                    'vals_discriminant': 'name,list_price,default_code,uom_id,sale_ok',
                },{
                    'field_name': 'product_id',
                    'trigger_type': 'update',
                    'model': 'product.template',
                    'selector_expression': &quot;result = self.mapped('product_variant_ids')&quot;,
                    'vals_discriminant': 'name,list_price,default_code,uom_id,sale_ok',
                },{
                    'field_name': 'product_id',
                    'trigger_type': 'complete',
                    'model': 'product.pricelist.item',
                    'selector_expression': &quot;&quot;&quot;
                        # Recompute products affected by the change
                        result = env['product.product']
                        for record in self:
                            if record.applied_on == '0_product_variant':
                                if record.product_id.sale_ok:
                                    result |= record.product_id
                            elif record.applied_on == '1_product':
                                if record.product_tmpl_id.sale_ok:
                                    result |= record.product_tmp_id.product_variant_ids
                            elif record.applied_on == '2_product_category':
                                result |= env['product.product'].search([('sale_ok', '=', True), ('categ_id', 'child_of', record.categ_id)])
                            elif record.applied_on == '3_global':
                                result |= env['product.product'].search([('sale_ok', '=', True)])
                    &quot;&quot;&quot;,
                    'vals_discriminant': 'fixed_price,percent_price,base,price_discount,price_surcharge,price_round,price_min_margin,price_max_margin',
                }),
            ]"
            />
        </record>
    </data>
</odoo>
