-
   Create a user as 'Salesmanager'
-
  !record {model: res.users, id: res_users_salesman2, view: False}:
    company_id: base.main_company
    name: "Sales managers"
    login: sm
    password: sm
    email: salesmanager@yourcompany.com
-                                                                                                                                           
  I added groups for Salesmanager.
-
  !record {model: res.users, id: res_users_salesman2}:
    groups_id:
      - base.group_sale_manager
-
   Create a partner
-
  !record {model: res.partner, id: test_partner1, view: False}:
    name: "Partner"
-                                                                                                                                           
  Test the data with salesman,
-
  !context
    uid: 'res_users_salesman2'
-
  In order to test process of the Sale Order, I create sale order
-
  !record {model: sale.order, id: sale_order_test3, view: false}:
    partner_id: base.res_partner_2
    note: Invoice after delivery
    order_line:
      - product_id: product.product_product_7
        product_uom_qty: 8
        discount: 0
        visible_discount: 0
        temp_value: False
-
  I verify that the onchange was correctly triggered
-
  !assert {model: sale.order, id: sale_order_test3, string: The onchange function of product was not correctly triggered}:
    - order_line[0].name == u'[A8767] Apple In-Ear Headphones'
    - order_line[0].price_unit == 79.0
    - order_line[0].product_uom_qty == 8
    - order_line[0].product_uom.id == ref('product.product_uom_unit')
-
  Check that we can change value of sale_order
-
  !python {model: sale.order}: |
     sale_order = self.browse(cr, uid, ref("sale_order_test3")) 
     sale_order.order_line[0].temp_value
     sale_order.order_line[0].price_unit = 39.5
     vals = sale_order.order_line[0]._onchange_price()
-
  I verify that the onchange was correctly triggered
-
  !assert {model: sale.order, id: sale_order_test3, string: The price_unit didn't get updated correctly first time}:
    - order_line[0].visible_discount == 50
    - order_line[0].price_unit == 39.5
-
  Check that we can change value of sale_order
-
  !python {model: sale.order}: |
     sale_order = self.browse(cr, uid, ref("sale_order_test3")) 
     sale_order.order_line[0].temp_value = None
     sale_order.order_line[0].price_unit = 79.0
     sale_order.order_line[0]._onchange_price()
-
  I verify that the onchange was correctly triggered
-
  !assert {model: sale.order, id: sale_order_test3, string: The price_unit didn't get updated correctly second time}:
    - order_line[0].visible_discount == 0.0
    - order_line[0].price_unit == 79.0
